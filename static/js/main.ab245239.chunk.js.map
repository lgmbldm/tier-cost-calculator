{"version":3,"sources":["App.js","index.js"],"names":["App","tierTypes","useState","tiers","setTiers","tierType","setTierType","current","setCurrent","goal","setGoal","loadData","a","fetch","process","config","json","configJson","useEffect","tier","amount","length","calculateTotalPrice","price","forEach","className","value","onChange","event","target","Object","keys","map","Math","ceil","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA0EeA,MAtEf,WACE,IAAMC,EAAY,CAAE,YAAe,UAAW,iBAAoB,eAAgB,cAAiB,YAAa,gBAAmB,cAAe,oBAAuB,kBAAmB,kBAAqB,iBADpM,EAEaC,mBAAS,MAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,eAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIiBJ,mBAAS,GAJ1B,mBAINK,EAJM,KAIGC,EAJH,OAKWN,mBAAS,KALpB,mBAKNO,EALM,KAKAC,EALA,KAOPC,EAAQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,GAAD,OAAIC,wBAAJ,iBADX,cACTC,EADS,gBAEUA,EAAOC,OAFjB,OAETC,EAFS,OAGfb,EAASa,GAHM,2CAAH,qDAMdC,qBAAU,WACRP,MACC,IAEHO,qBAAU,WACR,IAAMC,EAAI,OAAGhB,QAAH,IAAGA,OAAH,EAAGA,EAAQE,GACrBG,EAAU,OAACW,QAAD,IAACA,OAAD,EAACA,EAAO,GAAGC,QACrBV,EAAO,OAACS,QAAD,IAACA,OAAD,EAACA,GAAW,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAME,QAAS,GAAGD,UAChC,CAACf,EAAUF,IAEd,IAAMmB,EAAsB,WAC1B,IAAIC,EAAQ,EAMZ,OALK,OAALpB,QAAK,IAALA,KAAQE,GAAUmB,SAAQ,SAAAL,GACpBA,EAAKC,OAASb,GAAWY,EAAKC,QAAUX,IAC1Cc,GAASJ,EAAKI,UAGXA,GAQT,OACE,sBAAKE,UAAU,YAAf,UACE,gCACE,8CACA,wBAAQC,MAAOrB,EAAUsB,SAAU,SAAAC,GAAK,OAAItB,EAAYsB,EAAMC,OAAOH,QAArE,SACGvB,GAAS2B,OAAOC,KAAK5B,GAAO6B,KAAI,SAAA3B,GAAQ,OACvC,wBAAQqB,MAAOrB,EAAf,SAAyCJ,EAAUI,IAAaA,GAAlCA,WAIpC,gCACE,iDACA,wBAAQqB,MAAOnB,EAASoB,SAAU,SAAAC,GAAK,OAAIpB,EAAWoB,EAAMC,OAAOH,QAAnE,SACGvB,GAASA,EAAME,GAAU2B,KAAI,SAAAb,GAAI,OAChC,wBAAQO,MAAOP,EAAKC,OAApB,SAA+CD,EAAKC,QAAnBD,EAAKC,gBAI5C,gCACE,8CACA,wBAAQM,MAAOjB,EAAMkB,SAAU,SAAAC,GAAK,OAAIlB,EAAQkB,EAAMC,OAAOH,QAA7D,SACGvB,GAASA,EAAME,GAAU2B,KAAI,SAAAb,GAAI,OAChC,wBAAQO,MAAOP,EAAKC,OAApB,SAA+CD,EAAKC,QAAnBD,EAAKC,gBAI5C,+CAAkBE,OACJ,gBAAbjB,GAA8B,uDA/B1B4B,KAAKC,KAAKZ,IAAwBb,GA+BR,YAAkCR,EAAUI,IAAaA,UChE9F8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ab245239.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nfunction App() {\n  const tierTypes = { \"maxBetTiers\": \"Max Bet\", \"teamWinCoinTiers\": \"Passive Wins\", \"idolHitsTiers\": \"Idol Hits\", \"idolHomersTiers\": \"Idol Homers\", \"idolStrikeoutsTiers\": \"Idol Strikeouts\", \"idolShutoutsTiers\": \"Idol Shutouts\" };\n  const [tiers, setTiers] = useState(null);\n  const [tierType, setTierType] = useState(\"maxBetTiers\");\n  const [current, setCurrent] = useState(0);\n  const [goal, setGoal] = useState(1000);\n\n  const loadData = async () => {\n    const config = await fetch(`${process.env.PUBLIC_URL}/config.json`);\n    const configJson = await config.json();\n    setTiers(configJson);\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [])\n\n  useEffect(() => {\n    const tier = tiers?.[tierType];\n    setCurrent(tier?.[0].amount);\n    setGoal(tier?.[tier?.length - 1].amount);\n  }, [tierType, tiers]);\n\n  const calculateTotalPrice = () => {\n    let price = 0;\n    tiers?.[tierType].forEach(tier => {\n      if (tier.amount > current && tier.amount <= goal) {\n        price += tier.price;\n      }\n    });\n    return price;\n  };\n\n  const breakeven = () => {\n    return Math.ceil(calculateTotalPrice() / goal);\n  };\n\n\n  return (\n    <div className=\"container\">\n      <div>\n        <label>Tier Type</label>\n        <select value={tierType} onChange={event => setTierType(event.target.value)}>\n          {tiers && Object.keys(tiers).map(tierType =>\n            <option value={tierType} key={tierType}>{tierTypes[tierType] || tierType}</option>\n          )}\n        </select>\n      </div>\n      <div>\n        <label>Current Tier</label>\n        <select value={current} onChange={event => setCurrent(event.target.value)}>\n          {tiers && tiers[tierType].map(tier =>\n            <option value={tier.amount} key={tier.amount}>{tier.amount}</option>\n          )}\n        </select>\n      </div>\n      <div>\n        <label>Goal Tier</label>\n        <select value={goal} onChange={event => setGoal(event.target.value)}>\n          {tiers && tiers[tierType].map(tier =>\n            <option value={tier.amount} key={tier.amount}>{tier.amount}</option>\n          )}\n        </select>\n      </div>\n      <h4>Total Price: {calculateTotalPrice()}</h4>\n      {tierType !== 'maxBetTiers' && <h4>Breakeven: {`${breakeven()} ${tierTypes[tierType] || tierType}`}</h4>}\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}